from pymongo import MongoClient
from telethon import *
from telethon.tl import *

from KRISTY import BOT_ID, MONGO_DB_URI
from KRISTY import telethn as tbot
from KRISTY.events import register

client = MongoClient()
client = MongoClient(MONGO_DB_URI)
db = client["Fingapara2"]
approved_users = db.approve
dbb = client["Fingapara2"]
poll_id = dbb.pollid


async def is_register_admin(chat, user):
    if isinstance(chat, (types.InputPeerChannel, types.InputChannel)):
        return isinstance(
            (
                await tbot(functions.channels.GetParticipantRequest(chat, user))
            ).participant,
            (types.ChannelParticipantAdmin, types.ChannelParticipantCreator),
        )
    if isinstance(chat, types.InputPeerChat):
        ui = await tbot.get_peer_id(user)
        ps = (
            await tbot(functions.messages.GetFullChatRequest(chat.chat_id))
        ).full_chat.participants.participants
        return isinstance(
            next((p for p in ps if p.user_id == ui), None),
            (types.ChatParticipantAdmin, types.ChatParticipantCreator),
        )
    return None


@register(pattern="^/poll (.*)")
async def _(event):
    approved_userss = approved_users.find({})
    for ch in approved_userss:
        iid = ch["id"]
        userss = ch["user"]
    if event.is_group:
        if await is_register_admin(event.input_chat, event.message.sender_id):
            pass
        elif event.chat_id == iid and event.sender_id == userss:
            pass
        else:
            return
    try:
        quew = event.pattern_match.group(1)
    except Exception:
        await event.reply("·¥° ú·¥á Ä·¥á …™Íú± ·¥õ ú·¥á Q·¥ú·¥áÍú±·¥õ…™·¥è…¥  ô·¥Ä ô èü•Ä?")
        return
    if "|" in quew:
        secrets, quess, options = quew.split("|")
    secret = secrets.strip()

    if not secret:
        await event.reply("…™ …¥·¥á·¥á·¥Ö ·¥Ä ·¥ò·¥è ü ü …™·¥Ö ·¥èÍú∞ 5 ·¥Ö…™…¢…™·¥õÍú± ·¥õ·¥è ·¥ç·¥Ä·¥ã·¥á ·¥Ä ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä")
        return

    try:
        secret = str(secret)
    except ValueError:
        await event.reply("·¥ò·¥è ü ü …™·¥Ö Íú± ú·¥è·¥ú ü·¥Ö ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥ ·¥è…¥ ü è …¥·¥ú·¥ç ô·¥á ÄÍú±  ô·¥Ä ô èü•Ä")
        return

    # print(secret)

    if len(secret) != 5:
        await event.reply("·¥ò·¥è ü ü …™·¥Ö Íú± ú·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ä…¥ …™…¥·¥õ·¥á…¢·¥á Ä ·¥èÍú∞ 5 ·¥Ö…™…¢…™·¥õÍú±  ô·¥Ä ô èü•Ä")
        return

    allpoll = poll_id.find({})
    # print(secret)
    for c in allpoll:
        if event.sender_id == c["user"]:
            await event.reply(
                "·¥ò ü·¥á·¥ÄÍú±·¥á Íú±·¥õ·¥è·¥ò ·¥õ ú·¥á ·¥ò Ä·¥á·¥†…™·¥è·¥úÍú± ·¥ò·¥è ü ü  ô·¥áÍú∞·¥è Ä·¥á ·¥Ñ Ä·¥á·¥Ä·¥õ…™…¥…¢ ·¥Ä …¥·¥á·¥° ·¥è…¥·¥á  ô·¥Ä ô èü•Ä!"
            )
            return
    poll_id.insert_one({"user": event.sender_id, "pollid": secret})

    ques = quess.strip()
    option = options.strip()
    quiz = option.split(" ")[1 - 1]
    if "True" in quiz:
        quizy = True
        if "@" in quiz:
            one, two = quiz.split("@")
            rightone = two.strip()
        else:
            await event.reply(
                " è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è Íú±·¥á ü·¥á·¥Ñ·¥õ ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥Ä…¥Íú±·¥°·¥á Ä ·¥°…™·¥õ ú Q·¥ú·¥áÍú±·¥õ…™·¥è…¥ …¥·¥ú·¥ç ô·¥á Ä  ü…™·¥ã·¥á ·¥õ Ä·¥ú·¥á@1, True@3 ·¥á·¥õ·¥Ñ  ô·¥Ä ô èü•Ä..."
            )
            return

        quizoptionss = []
        try:
            ab = option.split(" ")[4 - 1]
            cd = option.split(" ")[5 - 1]
            quizoptionss.append(types.PollAnswer(ab, b"1"))
            quizoptionss.append(types.PollAnswer(cd, b"2"))
        except Exception:
            await event.reply("·¥Ä·¥õ  ü·¥á·¥ÄÍú±·¥õ …¥·¥á·¥á·¥Ö ·¥õ·¥°·¥è ·¥è·¥ò·¥õ…™·¥è…¥Íú± ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä")
            return
        try:
            ef = option.split(" ")[6 - 1]
            quizoptionss.append(types.PollAnswer(ef, b"3"))
        except Exception:
            ef = None
        try:
            gh = option.split(" ")[7 - 1]
            quizoptionss.append(types.PollAnswer(gh, b"4"))
        except Exception:
            gh = None
        try:
            ij = option.split(" ")[8 - 1]
            quizoptionss.append(types.PollAnswer(ij, b"5"))
        except Exception:
            ij = None
        try:
            kl = option.split(" ")[9 - 1]
            quizoptionss.append(types.PollAnswer(kl, b"6"))
        except Exception:
            kl = None
        try:
            mn = option.split(" ")[10 - 1]
            quizoptionss.append(types.PollAnswer(mn, b"7"))
        except Exception:
            mn = None
        try:
            op = option.split(" ")[11 - 1]
            quizoptionss.append(types.PollAnswer(op, b"8"))
        except Exception:
            op = None
        try:
            qr = option.split(" ")[12 - 1]
            quizoptionss.append(types.PollAnswer(qr, b"9"))
        except Exception:
            qr = None
        try:
            st = option.split(" ")[13 - 1]
            quizoptionss.append(types.PollAnswer(st, b"10"))
        except Exception:
            st = None

    elif "False" in quiz:
        quizy = False
    else:
        await event.reply("·¥° Ä·¥è…¥…¢ ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õÍú± ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥Ä ô èü•Ä!")
        return

    pvote = option.split(" ")[2 - 1]
    if "True" in pvote:
        pvoty = True
    elif "False" in pvote:
        pvoty = False
    else:
        await event.reply("·¥° Ä·¥è…¥…¢ ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õÍú± ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥Ä ô èü•Ä!")
        return
    mchoice = option.split(" ")[3 - 1]
    if "True" in mchoice:
        mchoicee = True
    elif "False" in mchoice:
        mchoicee = False
    else:
        await event.reply("·¥° Ä·¥è…¥…¢ ·¥Ä Ä…¢·¥ú·¥ç·¥á…¥·¥õÍú± ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥Ä ô èü•Ä!")
        return
    optionss = []
    try:
        ab = option.split(" ")[4 - 1]
        cd = option.split(" ")[5 - 1]
        optionss.append(types.PollAnswer(ab, b"1"))
        optionss.append(types.PollAnswer(cd, b"2"))
    except Exception:
        await event.reply("·¥Ä·¥õ  ü·¥á·¥ÄÍú±·¥õ …¥·¥á·¥á·¥Ö ·¥õ·¥°·¥è ·¥è·¥ò·¥õ…™·¥è…¥Íú± ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä")
        return
    try:
        ef = option.split(" ")[6 - 1]
        optionss.append(types.PollAnswer(ef, b"3"))
    except Exception:
        ef = None
    try:
        gh = option.split(" ")[7 - 1]
        optionss.append(types.PollAnswer(gh, b"4"))
    except Exception:
        gh = None
    try:
        ij = option.split(" ")[8 - 1]
        optionss.append(types.PollAnswer(ij, b"5"))
    except Exception:
        ij = None
    try:
        kl = option.split(" ")[9 - 1]
        optionss.append(types.PollAnswer(kl, b"6"))
    except Exception:
        kl = None
    try:
        mn = option.split(" ")[10 - 1]
        optionss.append(types.PollAnswer(mn, b"7"))
    except Exception:
        mn = None
    try:
        op = option.split(" ")[11 - 1]
        optionss.append(types.PollAnswer(op, b"8"))
    except Exception:
        op = None
    try:
        qr = option.split(" ")[12 - 1]
        optionss.append(types.PollAnswer(qr, b"9"))
    except Exception:
        qr = None
    try:
        st = option.split(" ")[13 - 1]
        optionss.append(types.PollAnswer(st, b"10"))
    except Exception:
        st = None

    if pvoty is False and quizy is False and mchoicee is False:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(id=12345, question=ques, answers=optionss, quiz=False)
            ),
        )

    if pvoty is True and quizy is False and mchoicee is True:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(
                    id=12345,
                    question=ques,
                    answers=optionss,
                    quiz=False,
                    multiple_choice=True,
                    public_voters=True,
                )
            ),
        )

    if pvoty is False and quizy is False and mchoicee is True:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(
                    id=12345,
                    question=ques,
                    answers=optionss,
                    quiz=False,
                    multiple_choice=True,
                    public_voters=False,
                )
            ),
        )

    if pvoty is True and quizy is False and mchoicee is False:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(
                    id=12345,
                    question=ques,
                    answers=optionss,
                    quiz=False,
                    multiple_choice=False,
                    public_voters=True,
                )
            ),
        )

    if pvoty is False and quizy is True and mchoicee is False:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(
                    id=12345, question=ques, answers=quizoptionss, quiz=True
                ),
                correct_answers=[f"{rightone}"],
            ),
        )

    if pvoty is True and quizy is True and mchoicee is False:
        await tbot.send_file(
            event.chat_id,
            types.InputMediaPoll(
                poll=types.Poll(
                    id=12345,
                    question=ques,
                    answers=quizoptionss,
                    quiz=True,
                    public_voters=True,
                ),
                correct_answers=[f"{rightone}"],
            ),
        )

    if pvoty is True and quizy is True and mchoicee is True:
        await event.reply(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥úÍú±·¥á ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥†·¥è·¥õ…™…¥…¢ ·¥°…™·¥õ ú Q·¥ú…™·¥¢ ·¥ç·¥è·¥Ö·¥á  ô·¥Ä ô èü•Ä")
        return
    if pvoty is False and quizy is True and mchoicee is True:
        await event.reply(" è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥úÍú±·¥á ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥†·¥è·¥õ…™…¥…¢ ·¥°…™·¥õ ú Q·¥ú…™·¥¢ ·¥ç·¥è·¥Ö·¥á  ô·¥Ä ô èü•Ä")
        return


@register(pattern="^/stoppoll(?: |$)(.*)")
async def stop(event):
    secret = event.pattern_match.group(1)
    # print(secret)
    approved_userss = approved_users.find({})
    for ch in approved_userss:
        iid = ch["id"]
        userss = ch["user"]
    if event.is_group:
        if await is_register_admin(event.input_chat, event.message.sender_id):
            pass
        elif event.chat_id == iid and event.sender_id == userss:
            pass
        else:
            return

    if not event.reply_to_msg_id:
        await event.reply("·¥ò ü·¥á·¥ÄÍú±·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ò·¥è ü ü ·¥õ·¥è Íú±·¥õ·¥è·¥ò …™·¥õ  ô·¥Ä ô èü•Ä")
        return

    if input is None:
        await event.reply("·¥° ú·¥á Ä·¥á …™Íú± ·¥õ ú·¥á ·¥ò·¥è ü ü …™·¥Ö  ô·¥Ä ô èü•Ä?")
        return

    try:
        secret = str(secret)
    except ValueError:
        await event.reply("·¥ò·¥è ü ü …™·¥Ö Íú± ú·¥è·¥ú ü·¥Ö ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥ ·¥è…¥ ü è …¥·¥ú·¥ç ô·¥á ÄÍú±  ô·¥Ä ô èü•Ä")
        return

    if len(secret) != 5:
        await event.reply("·¥ò·¥è ü ü …™·¥Ö Íú± ú·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ä…¥ …™…¥·¥õ·¥á…¢·¥á Ä ·¥èÍú∞ 5 ·¥Ö…™…¢…™·¥õÍú±  ô·¥Ä ô èü•Ä")
        return

    msg = await event.get_reply_message()

    if str(msg.sender_id) != str(BOT_ID):
        await event.reply(
            "…™ ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥è ·¥õ ú…™Íú± ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥è…¥ ·¥õ ú…™Íú± ·¥ò·¥è ü ü.\n·¥ò Ä·¥è ô·¥Ä ô ü è …™·¥õ'Íú± …¥·¥è·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö  ô è ·¥ç·¥á  ô·¥Ä ô èü•Ä"
        )
        return
    print(secret)
    if msg.poll:
        allpoll = poll_id.find({})
        for c in allpoll:
            if not event.sender_id == c["user"] and not secret == c["pollid"]:
                await event.reply(
                    "·¥è·¥è·¥òÍú±, ·¥á…™·¥õ ú·¥á Ä  è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö ·¥õ ú…™Íú± ·¥ò·¥è ü ü ·¥è Ä  è·¥è·¥ú  ú·¥Ä·¥†·¥á …¢…™·¥†·¥á…¥ ·¥° Ä·¥è…¥…¢ ·¥ò·¥è ü ü …™·¥Ö  ô·¥Ä ô èü•Ä"
                )
                return
        if msg.poll.poll.closed:
            await event.reply("·¥è·¥è·¥òÍú±, ·¥õ ú·¥á ·¥ò·¥è ü ü …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ñ ü·¥èÍú±·¥á·¥Ö  ô·¥Ä ô èü•Ä.")
            return
        poll_id.delete_one({"user": event.sender_id})
        pollid = msg.poll.poll.id
        await msg.edit(
            file=types.InputMediaPoll(
                poll=types.Poll(id=pollid, question="", answers=[], closed=True)
            )
        )
        await event.reply("Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è Íú±·¥õ·¥è·¥ò·¥ò·¥á·¥Ö ·¥õ ú·¥á ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä")
    else:
        await event.reply("·¥õ ú…™Íú± …™Íú±…¥'·¥õ ·¥Ä ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä")


@register(pattern="^/forgotpollid$")
async def stop(event):
    approved_userss = approved_users.find({})
    for ch in approved_userss:
        iid = ch["id"]
        userss = ch["user"]
    if event.is_group:
        if await is_register_admin(event.input_chat, event.message.sender_id):
            pass
        elif event.chat_id == iid and event.sender_id == userss:
            pass
        else:
            return
    allpoll = poll_id.find({})
    for c in allpoll:
        if event.sender_id == c["user"]:
            try:
                poll_id.delete_one({"user": event.sender_id})
                await event.reply("·¥Ö·¥è…¥·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¥·¥è·¥° ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥Ä …¥·¥á·¥° ·¥ò·¥è ü ü  ô·¥Ä ô èü•Ä.")
            except Exception:
                await event.reply("Íú±·¥á·¥á·¥çÍú±  ü…™·¥ã·¥á  è·¥è·¥ú  ú·¥Ä·¥†·¥á…¥'·¥õ ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á·¥Ö ·¥Ä…¥ è ·¥ò·¥è ü ü  è·¥á·¥õ  ô·¥Ä ô èü•Ä!")


__help__ = """
¬ª ·¥ò·¥è ü ü-…™·¥Ö - ·¥Ä ·¥ò·¥è ü ü …™·¥Ö ·¥Ñ·¥è…¥Íú±…™Íú±·¥õÍú± ·¥èÍú∞ ·¥Ä…¥ 5 ·¥Ö…™…¢…™·¥õ  Ä·¥Ä…¥·¥Ö·¥è·¥ç …™…¥·¥õ·¥á…¢·¥á Ä, ·¥õ ú…™Íú± …™·¥Ö …™Íú± ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥õ ú·¥á Íú± èÍú±·¥õ·¥á·¥ç ·¥° ú·¥á…¥  è·¥è·¥ú Íú±·¥õ·¥è·¥ò  è·¥è·¥ú Ä ·¥ò Ä·¥á·¥†…™·¥è·¥úÍú± ·¥ò·¥è ü ü 
¬ª Q·¥ú·¥áÍú±·¥õ…™·¥è…¥ - ·¥õ ú·¥á Q·¥ú·¥áÍú±·¥õ…™·¥è…¥  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥ÄÍú±·¥ã 
¬ª <·¥õ Ä·¥ú·¥á@·¥è·¥ò·¥õ…™·¥è…¥…¥·¥ú·¥ç ô·¥á Ä/Íú∞·¥Ä üÍú±·¥á>(1) - Q·¥ú…™·¥¢ ·¥ç·¥è·¥Ö·¥á,  è·¥è·¥ú ·¥ç·¥úÍú±·¥õ Íú±·¥õ·¥Ä·¥õ·¥á ·¥õ ú·¥á ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ·¥Ä…¥Íú±·¥°·¥á Ä ·¥°…™·¥õ ú `@` ·¥á…¢: `·¥õ Ä·¥ú·¥á@1` ·¥è Ä `·¥õ Ä·¥ú·¥á@2` 
¬ª <·¥õ Ä·¥ú·¥á/Íú∞·¥Ä üÍú±·¥á>(2) - ·¥ò·¥ú ô ü…™·¥Ñ ·¥†·¥è·¥õ·¥áÍú± ¬ª <·¥õ Ä·¥ú·¥á/Íú∞·¥Ä üÍú±·¥á>(3) - ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥Ñ ú·¥è…™·¥Ñ·¥á
**Íú± è…¥·¥õ·¥Äx** -
¬ª `/poll <·¥ò·¥è ü ü-…™·¥Ö> <Q·¥ú·¥áÍú±·¥õ…™·¥è…¥> | <·¥õ Ä·¥ú·¥á@·¥è·¥ò·¥õ…™·¥è…¥…¥·¥ú·¥ç ô·¥á Ä/Íú∞·¥Ä üÍú±·¥á> <·¥õ Ä·¥ú·¥á/Íú∞·¥Ä üÍú±·¥á> <·¥õ Ä·¥ú·¥á/Íú∞·¥Ä üÍú±·¥á> <·¥è·¥ò·¥õ…™·¥è…¥1> <·¥è·¥ò·¥õ…™·¥è…¥2> ... ·¥ú·¥ò·¥õ·¥è <·¥è·¥ò·¥õ…™·¥è…¥10>`
**·¥áx·¥Ä·¥ç·¥ò ü·¥áÍú±** -
¬ª `/poll 12345 | ·¥Ä·¥ç …™ ·¥Ñ·¥è·¥è ü? | Íú∞·¥Ä üÍú±·¥á Íú∞·¥Ä üÍú±·¥á Íú∞·¥Ä üÍú±·¥á  è·¥áÍú± …¥·¥è`
¬ª `/poll 12345 | ·¥Ä·¥ç …™ ·¥Ñ·¥è·¥è ü? | ·¥õ Ä·¥ú·¥á@1 Íú∞·¥Ä üÍú±·¥á Íú∞·¥Ä üÍú±·¥á  è·¥áÍú± …¥·¥è`
**·¥õ·¥è Íú±·¥õ·¥è·¥ò ·¥Ä ·¥ò·¥è ü ü**
 Ä·¥á·¥ò ü è ·¥õ·¥è ·¥õ ú·¥á ·¥ò·¥è ü ü ·¥°…™·¥õ ú `/stoppoll <·¥ò·¥è ü ü-…™·¥Ö>` ·¥õ·¥è Íú±·¥õ·¥è·¥ò ·¥õ ú·¥á ·¥ò·¥è ü ü**…¥·¥è·¥õ·¥á**
…™Íú∞  è·¥è·¥ú  ú·¥Ä·¥†·¥á Íú∞·¥è Ä…¢·¥è·¥õ·¥õ·¥á…¥  è·¥è·¥ú Ä ·¥ò·¥è ü ü …™·¥Ö ·¥è Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥õ ú·¥á ·¥ò·¥è ü ü Íú±·¥è ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ Íú±·¥õ·¥è·¥ò ·¥õ ú·¥á ·¥ò Ä·¥á·¥†…™·¥è·¥úÍú± ·¥ò·¥è ü ü ·¥õ è·¥ò·¥á `/forgotpollid`, ·¥õ ú…™Íú± ·¥°…™ ü ü  Ä·¥áÍú±·¥á·¥õ ·¥õ ú·¥á ·¥ò·¥è ü ü …™·¥Ö,  è·¥è·¥ú ·¥°…™ ü ü  ú·¥Ä·¥†·¥á …¥·¥è ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ·¥è ·¥õ ú·¥á ·¥ò Ä·¥á·¥†…™·¥è·¥úÍú± ·¥ò·¥è ü ü!
"""


__mod_name__ = "POLLING"
